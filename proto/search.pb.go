// Code generated by protoc-gen-go.
// source: search.proto
// DO NOT EDIT!

package Spotify

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SearchRequest_Type int32

const (
	SearchRequest_TRACK    SearchRequest_Type = 0
	SearchRequest_ALBUM    SearchRequest_Type = 1
	SearchRequest_ARTIST   SearchRequest_Type = 2
	SearchRequest_PLAYLIST SearchRequest_Type = 3
	SearchRequest_USER     SearchRequest_Type = 4
)

var SearchRequest_Type_name = map[int32]string{
	0: "TRACK",
	1: "ALBUM",
	2: "ARTIST",
	3: "PLAYLIST",
	4: "USER",
}
var SearchRequest_Type_value = map[string]int32{
	"TRACK":    0,
	"ALBUM":    1,
	"ARTIST":   2,
	"PLAYLIST": 3,
	"USER":     4,
}

func (x SearchRequest_Type) Enum() *SearchRequest_Type {
	p := new(SearchRequest_Type)
	*p = x
	return p
}
func (x SearchRequest_Type) String() string {
	return proto.EnumName(SearchRequest_Type_name, int32(x))
}
func (x *SearchRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SearchRequest_Type_value, data, "SearchRequest_Type")
	if err != nil {
		return err
	}
	*x = SearchRequest_Type(value)
	return nil
}
func (SearchRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor16, []int{0, 0} }

type SearchRequest struct {
	Query            *string             `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Type             *SearchRequest_Type `protobuf:"varint,2,opt,name=type,enum=Spotify.SearchRequest_Type" json:"type,omitempty"`
	Limit            *int32              `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	Offset           *int32              `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	DidYouMean       *bool               `protobuf:"varint,5,opt,name=did_you_mean,json=didYouMean" json:"did_you_mean,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *SearchRequest) GetQuery() string {
	if m != nil && m.Query != nil {
		return *m.Query
	}
	return ""
}

func (m *SearchRequest) GetType() SearchRequest_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SearchRequest_TRACK
}

func (m *SearchRequest) GetLimit() int32 {
	if m != nil && m.Limit != nil {
		return *m.Limit
	}
	return 0
}

func (m *SearchRequest) GetOffset() int32 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *SearchRequest) GetDidYouMean() bool {
	if m != nil && m.DidYouMean != nil {
		return *m.DidYouMean
	}
	return false
}

type Playlist struct {
	Uri              *string  `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Image            []*Image `protobuf:"bytes,3,rep,name=image" json:"image,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Playlist) Reset()                    { *m = Playlist{} }
func (m *Playlist) String() string            { return proto.CompactTextString(m) }
func (*Playlist) ProtoMessage()               {}
func (*Playlist) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *Playlist) GetUri() string {
	if m != nil && m.Uri != nil {
		return *m.Uri
	}
	return ""
}

func (m *Playlist) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Playlist) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type User struct {
	Username         *string  `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	FullName         *string  `protobuf:"bytes,2,opt,name=full_name,json=fullName" json:"full_name,omitempty"`
	Image            []*Image `protobuf:"bytes,3,rep,name=image" json:"image,omitempty"`
	Followers        *int32   `protobuf:"zigzag32,4,opt,name=followers" json:"followers,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

func (m *User) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

func (m *User) GetFullName() string {
	if m != nil && m.FullName != nil {
		return *m.FullName
	}
	return ""
}

func (m *User) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *User) GetFollowers() int32 {
	if m != nil && m.Followers != nil {
		return *m.Followers
	}
	return 0
}

type SearchReply struct {
	Hits             *int32      `protobuf:"zigzag32,1,opt,name=hits" json:"hits,omitempty"`
	Track            []*Track    `protobuf:"bytes,2,rep,name=track" json:"track,omitempty"`
	Album            []*Album    `protobuf:"bytes,3,rep,name=album" json:"album,omitempty"`
	Artist           []*Artist   `protobuf:"bytes,4,rep,name=artist" json:"artist,omitempty"`
	Playlist         []*Playlist `protobuf:"bytes,5,rep,name=playlist" json:"playlist,omitempty"`
	DidYouMean       *string     `protobuf:"bytes,6,opt,name=did_you_mean,json=didYouMean" json:"did_you_mean,omitempty"`
	User             []*User     `protobuf:"bytes,7,rep,name=user" json:"user,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SearchReply) Reset()                    { *m = SearchReply{} }
func (m *SearchReply) String() string            { return proto.CompactTextString(m) }
func (*SearchReply) ProtoMessage()               {}
func (*SearchReply) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func (m *SearchReply) GetHits() int32 {
	if m != nil && m.Hits != nil {
		return *m.Hits
	}
	return 0
}

func (m *SearchReply) GetTrack() []*Track {
	if m != nil {
		return m.Track
	}
	return nil
}

func (m *SearchReply) GetAlbum() []*Album {
	if m != nil {
		return m.Album
	}
	return nil
}

func (m *SearchReply) GetArtist() []*Artist {
	if m != nil {
		return m.Artist
	}
	return nil
}

func (m *SearchReply) GetPlaylist() []*Playlist {
	if m != nil {
		return m.Playlist
	}
	return nil
}

func (m *SearchReply) GetDidYouMean() string {
	if m != nil && m.DidYouMean != nil {
		return *m.DidYouMean
	}
	return ""
}

func (m *SearchReply) GetUser() []*User {
	if m != nil {
		return m.User
	}
	return nil
}

func init() {
	proto.RegisterType((*SearchRequest)(nil), "Spotify.SearchRequest")
	proto.RegisterType((*Playlist)(nil), "Spotify.Playlist")
	proto.RegisterType((*User)(nil), "Spotify.User")
	proto.RegisterType((*SearchReply)(nil), "Spotify.SearchReply")
	proto.RegisterEnum("Spotify.SearchRequest_Type", SearchRequest_Type_name, SearchRequest_Type_value)
}

func init() { proto.RegisterFile("search.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x89, 0x9d, 0x3a, 0xd3, 0x34, 0x38, 0x23, 0x84, 0xac, 0x96, 0x43, 0xb1, 0x90, 0xe8,
	0x85, 0x20, 0xf5, 0x17, 0x60, 0x10, 0x87, 0x8a, 0x14, 0xa1, 0x89, 0x8b, 0xd4, 0x53, 0xb4, 0x34,
	0x1b, 0x6a, 0xb1, 0xae, 0x8d, 0xbd, 0x16, 0xf2, 0x99, 0x1b, 0xbf, 0x94, 0x9f, 0xc1, 0xec, 0xae,
	0xeb, 0xb6, 0xea, 0x85, 0x93, 0x67, 0xde, 0x7b, 0x7e, 0xf3, 0xb5, 0x30, 0x6b, 0xa4, 0xa8, 0xaf,
	0xae, 0x97, 0x55, 0x5d, 0xea, 0x12, 0xf7, 0xd6, 0x55, 0xa9, 0xf3, 0x5d, 0x77, 0x38, 0x2f, 0xa4,
	0x16, 0x5b, 0xa1, 0x85, 0x23, 0x92, 0xbf, 0x1e, 0x1c, 0xac, 0xad, 0x92, 0xe4, 0xcf, 0x56, 0x36,
	0x1a, 0x9f, 0x41, 0xc0, 0x41, 0xdd, 0xc5, 0xde, 0xb1, 0x77, 0x32, 0x25, 0x97, 0xe0, 0x5b, 0xf0,
	0x75, 0x57, 0xc9, 0x78, 0xc4, 0xe0, 0xfc, 0xf4, 0x68, 0xd9, 0xfb, 0x2d, 0x1f, 0xfc, 0xbb, 0xcc,
	0x58, 0x42, 0x56, 0x68, 0x6c, 0x54, 0x5e, 0xe4, 0x3a, 0x1e, 0xf3, 0x1f, 0x01, 0xb9, 0x04, 0x9f,
	0xc3, 0xa4, 0xdc, 0xed, 0x1a, 0xa9, 0x63, 0xdf, 0xc2, 0x7d, 0x86, 0xc7, 0x30, 0xdb, 0xe6, 0xdb,
	0x4d, 0x57, 0xb6, 0x9b, 0x42, 0x8a, 0x9b, 0x38, 0x60, 0x36, 0x24, 0x60, 0xec, 0xb2, 0x6c, 0xcf,
	0x19, 0x49, 0xde, 0x81, 0x6f, 0xdc, 0x71, 0x0a, 0x41, 0x46, 0xe9, 0x87, 0x4f, 0xd1, 0x13, 0x13,
	0xa6, 0xab, 0xf7, 0x17, 0xe7, 0x91, 0x87, 0x00, 0x93, 0x94, 0xb2, 0xb3, 0x75, 0x16, 0x8d, 0x70,
	0x06, 0xe1, 0x97, 0x55, 0x7a, 0xb9, 0x32, 0xd9, 0x18, 0x43, 0xf0, 0x2f, 0xd6, 0x1f, 0x29, 0xf2,
	0x93, 0xaf, 0x8c, 0x2b, 0xd1, 0xa9, 0x9c, 0x87, 0x8c, 0x60, 0xdc, 0xd6, 0x79, 0x3f, 0xa2, 0x09,
	0x11, 0xc1, 0xbf, 0x11, 0x85, 0x1b, 0x70, 0x4a, 0x36, 0xc6, 0x57, 0x10, 0xe4, 0x85, 0xf8, 0x2e,
	0x79, 0x86, 0xf1, 0xc9, 0xfe, 0xe9, 0x7c, 0x98, 0xfa, 0xcc, 0xa0, 0xe4, 0xc8, 0xe4, 0xb7, 0xc7,
	0x25, 0x1a, 0x59, 0xe3, 0x21, 0x84, 0x2d, 0x7f, 0xad, 0x8d, 0x73, 0x1e, 0x72, 0x3c, 0x82, 0xe9,
	0xae, 0x55, 0x6a, 0x73, 0xaf, 0x46, 0x68, 0x80, 0xcf, 0xff, 0x5d, 0x07, 0x5f, 0xb0, 0x45, 0xa9,
	0x54, 0xf9, 0x4b, 0xd6, 0x8d, 0x5d, 0xdf, 0x82, 0xee, 0x80, 0xe4, 0xcf, 0x08, 0xf6, 0x6f, 0x8f,
	0x51, 0xa9, 0xce, 0xcc, 0x73, 0x9d, 0xeb, 0xc6, 0x36, 0xb2, 0x20, 0x1b, 0x9b, 0x3a, 0xba, 0x16,
	0x57, 0x3f, 0xb8, 0x81, 0x87, 0x75, 0x32, 0x83, 0x92, 0x23, 0x8d, 0x4a, 0xa8, 0x6f, 0x6d, 0xf1,
	0xa8, 0x9b, 0xd4, 0xa0, 0xe4, 0x48, 0x7c, 0x0d, 0x13, 0x51, 0x6b, 0xde, 0x25, 0xb7, 0x62, 0x64,
	0x4f, 0xef, 0x64, 0x16, 0xa6, 0x9e, 0xc6, 0x37, 0x10, 0x56, 0xfd, 0xda, 0xf9, 0xac, 0x46, 0xba,
	0x18, 0xa4, 0xb7, 0xf7, 0xa0, 0x41, 0xf2, 0xe8, 0x25, 0x4c, 0xec, 0xae, 0xee, 0xbd, 0x04, 0x7c,
	0x09, 0xbe, 0x59, 0x6b, 0xbc, 0x67, 0xcd, 0x0e, 0x06, 0x33, 0x73, 0x03, 0xb2, 0xd4, 0xbf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xee, 0x48, 0x9a, 0x2a, 0xfd, 0x02, 0x00, 0x00,
}
