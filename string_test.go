package stringutil

// import "testing"
// import "bytes"

// func setupShannon() ShannonStream{
// 	shannon := ShannonStream{}
// 	shannon.SetSendKey([]uint8("cool key 123"))
// 	shannon.SetRecvKey([]uint8("cool key 123"))
// 	return shannon
// }

// func TestShnKey(t *testing.T) {
// 	shannon := setupShannon()
// 	res := shannon.Encrypt("hi123")

// 	want := []uint8{102,155,110,118,118}
// 	if !bytes.Equal(res, want) {
// 		t.Errorf("result does not match, %v %v", want, res)
// 	}
// }

// func TestFinishSend(t *testing.T) {
// 	shannon := setupShannon()
// 	res := shannon.EncryptBytes([]byte("hi123"))
// 	res = append(res, shannon.FinishSend()...)

// 	want := []uint8{102, 155, 110, 118, 118, 231, 12, 121, 114}
// 	if !bytes.Equal(res, want) {
// 		t.Errorf("result does not match, %v %v", want, res)
// 	}
// }

// func TestEncode(t *testing.T) {
// 	sendKey := []byte{
//         239, 15, 68, 152, 244, 120, 58, 27, 16, 132, 148, 62, 241, 73, 196, 74, 194, 141, 115, 65, 141, 222, 239, 66, 3, 111, 184, 159, 211, 251, 74, 214,
// 	}
// 	packet := []byte{
//        82, 24, 82, 10, 49, 50, 52, 53, 53, 56, 52, 54, 48, 50, 160, 1, 0, 242, 1, 6, 50, 49, 51, 49, 50, 53, 146, 3, 60, 80, 0, 224, 3, 0, 210, 5, 9, 108, 105, 98, 114, 101, 115, 112, 111, 116, 162, 6, 40, 55, 50, 56, 56, 101, 100, 100, 48, 102, 99, 51, 102, 102, 99, 98, 101, 57, 51, 97, 48, 99, 102, 48, 54, 101, 51, 53, 54, 56, 101, 50, 56, 53, 50, 49, 54, 56, 55, 98, 99, 178, 4, 17, 108, 105, 98, 114, 101, 115, 112, 111, 116, 45, 56, 51, 49, 53, 101, 49, 48, 130, 5, 241, 2, 8, 1, 18, 128, 1, 186, 250, 60, 169, 173, 199, 160, 1, 196, 108, 34, 130, 42, 191, 43, 253, 233, 158, 63, 169, 183, 214, 72, 79, 98, 79, 185, 188, 191, 17, 220, 243, 232, 19, 33, 206, 250, 183, 198, 79, 192, 212, 161, 200, 90, 197, 165, 218, 153, 223, 250, 246, 52, 63, 33, 245, 47, 178, 59, 87, 13, 173, 69, 191, 127, 198, 211, 199, 10, 108, 77, 198, 170, 250, 98, 143, 148, 251, 181, 238, 18, 223, 189, 151, 106, 27, 237, 185, 200, 165, 24, 43, 245, 219, 79, 152, 61, 243, 76, 8, 10, 155, 139, 9, 63, 112, 243, 123, 60, 213, 191, 240, 109, 131, 97, 224, 117, 138, 84, 224, 1, 253, 170, 131, 12, 48, 50, 72, 26, 192, 1, 80, 204, 221, 35, 186, 246, 45, 101, 23, 161, 73, 62, 4, 54, 247, 188, 154, 4, 180, 54, 39, 63, 231, 20, 151, 223, 94, 166, 192, 31, 37, 77, 135, 206, 6, 250, 178, 190, 77, 77, 12, 12, 137, 42, 185, 36, 233, 187, 245, 61, 241, 106, 208, 18, 232, 245, 73, 51, 231, 5, 4, 63, 236, 74, 174, 107, 197, 109, 8, 206, 80, 199, 57, 58, 253, 117, 70, 90, 188, 40, 112, 6, 58, 35, 131, 102, 141, 250, 40, 8, 151, 150, 138, 32, 23, 22, 136, 171, 193, 110, 104, 241, 40, 205, 209, 117, 230, 234, 232, 86, 18, 122, 11, 250, 77, 51, 106, 32, 71, 44, 80, 71, 161, 40, 36, 38, 163, 49, 44, 30, 202, 249, 243, 85, 23, 232, 51, 53, 31, 182, 198, 214, 23, 5, 239, 104, 251, 208, 58, 180, 190, 23, 177, 206, 106, 252, 191, 234, 118, 28, 182, 240, 231, 157, 255, 214, 140, 73, 222, 157, 200, 231, 249, 130, 81, 48, 78, 96, 186, 120, 176, 237, 212, 241, 143, 86, 102, 130, 154, 235, 55, 114, 34, 17, 108, 105, 98, 114, 101, 115, 112, 111, 116, 45, 56, 51, 49, 53, 101, 49, 48, 42, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
// 	}
// 	want := []byte{
// 		109, 216, 156, 165, 37, 229, 35, 187, 210, 215, 165, 252, 139, 16, 140, 92, 177, 127, 241, 5, 22, 148, 235, 11, 140, 144, 78, 6, 137, 136, 187, 182, 6, 191, 251, 208, 234, 209, 230, 27, 80, 176, 59, 95, 181, 120, 145, 75, 54, 126, 187, 244, 135, 118, 107, 227, 137, 231, 90, 155, 99, 220, 53, 28, 206, 105, 157, 254, 179, 225, 46, 106, 221, 28, 92, 208, 38, 247, 223, 123, 103, 128, 65, 83, 85, 144, 163, 16, 228, 174, 124, 67, 255, 78, 15, 206, 189, 147, 171, 151, 135, 36, 183, 114, 221, 230, 186, 86, 38, 194, 10, 238, 201, 152, 167, 33, 174, 215, 148, 174, 113, 77, 211, 218, 232, 225, 163, 221, 42, 199, 170, 88, 103, 190, 105, 226, 254, 148, 90, 192, 195, 106, 137, 197, 42, 62, 88, 85, 25, 174, 218, 238, 41, 209, 153, 230, 144, 196, 107, 91, 193, 25, 56, 225, 81, 100, 78, 173, 62, 135, 129, 17, 108, 238, 126, 118, 56, 223, 89, 237, 224, 143, 248, 38, 2, 203, 212, 150, 160, 134, 220, 229, 250, 162, 42, 10, 249, 73, 13, 48, 215, 183, 183, 176, 242, 35, 85, 233, 167, 130, 24, 12, 212, 174, 29, 73, 160, 76, 133, 239, 113, 191, 113, 155, 129, 85, 226, 27, 166, 144, 96, 139, 179, 254, 201, 115, 98, 244, 214, 36, 239, 61, 159, 12, 135, 198, 44, 22, 184, 89, 111, 239, 86, 50, 101, 13, 118, 47, 93, 87, 227, 98, 87, 220, 203, 167, 135, 88, 44, 189, 63, 156, 6, 105, 106, 38, 77, 102, 51, 37, 98, 72, 200, 23, 63, 105, 221, 118, 247, 166, 232, 66, 127, 237, 25, 169, 196, 126, 47, 49, 209, 45, 143, 10, 151, 227, 223, 245, 216, 118, 40, 55, 17, 254, 194, 102, 152, 195, 123, 244, 144, 53, 236, 241, 160, 233, 142, 41, 88, 57, 81, 167, 110, 125, 59, 6, 125, 100, 169, 183, 126, 30, 5, 76, 225, 66, 46, 255, 130, 5, 45, 118, 61, 47, 151, 170, 167, 102, 191, 47, 101, 45, 69, 173, 98, 148, 60, 58, 77, 20, 50, 52, 86, 233, 111, 81, 74, 246, 14, 160, 211, 163, 145, 68, 82, 204, 124, 122, 81, 235, 75, 187, 45, 206, 145, 53, 60, 251, 67, 233, 121, 231, 31, 172, 188, 116, 220, 60, 52, 17, 126, 197, 176, 130, 225, 82, 168, 5, 81, 58, 135, 20, 79, 254, 166, 168, 9, 84, 204, 50, 99, 108, 70, 208, 226, 215, 149, 219, 213, 81, 183, 171, 110, 219, 213, 79, 209, 97, 108, 206, 213, 252, 118, 24, 131, 250, 33, 111, 154, 204, 215, 16, 247, 134, 152, 42, 69, 235, 153, 255, 40, 63, 187, 70, 163, 95, 91, 1, 238, 80, 175, 45, 185, 35, 32, 169,
// 	}
// 	shannon := ShannonStream{}
// 	shannon.SetSendKey(sendKey)

// 	res := make([]byte,0)
// 	res = shannon.EncryptBytes(packet)
// 	res = append(res, shannon.FinishSend()...)

// 	if !bytes.Equal(res, want) {
// 		t.Errorf("encode result does not match, %v %v", want, res)
// 	}

// }

// func TestDecode(t *testing.T) {
// 	shannon := setupShannon()
// 	res := shannon.Encrypt("hi123")
// 	res = shannon.Decrypt(res)

// 	if !bytes.Equal(res, []byte("hi123")) {
// 		t.Errorf("result does not match, %v %v", res, []byte("hi123"))
// 	}
// }
